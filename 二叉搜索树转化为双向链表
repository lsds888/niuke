输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。

思路：
   1.核心是中序遍历的非递归算法。
   2.修改当前遍历节点与前一遍历节点的指针指向。
   
   
/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
    TreeNode* Convert(TreeNode* pRootOfTree)
    {
        if(pRootOfTree==NULL)
            return NULL;
        stack<TreeNode*> sta;
        TreeNode* p=pRootOfTree;
        TreeNode* pre=NULL;
        TreeNode* root=NULL;
        bool isfirst=true;
        while(p||!sta.empty()){
            while(p){
                sta.push(p);
                p=p->left;
            }
            p=sta.top();
            sta.pop();
            if(isfirst){
                root=p;
                pre=p;
                isfirst=false;
            }else{
                pre->right=p;
                p->left=pre;
                pre=p;
            }
            p=p->right;
        }
        return root;
    }
};




