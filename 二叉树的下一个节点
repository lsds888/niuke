题目描述
给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。

思路：若该节点有右孩子则下一个节点为右孩子为根节点的树的最下标的左孩子；若该节点有父节点且为父节点的左孩子，则下一个节点为父节点；若
该节点有父节点但不为父节点的左孩子，则一直向上找到该节点的父节点，直到某个节点为它父节点的左孩子时，输出父节点。

/*
struct TreeLinkNode {
    int val;
    struct TreeLinkNode *left;
    struct TreeLinkNode *right;
    struct TreeLinkNode *next;
    TreeLinkNode(int x) :val(x), left(NULL), right(NULL), next(NULL) {
        
    }
};
*/
class Solution {
public:
    TreeLinkNode* leftmostnode(TreeLinkNode* node){
        if(!node){
            return NULL;
        }
        while(node->left){
            node=node->left;
        }
        return node;
    }
    
    bool isleftnode(TreeLinkNode* node,TreeLinkNode* parent){
        return parent->left==node;
    }
    
    TreeLinkNode* GetNext(TreeLinkNode* pNode)
    {
        if(pNode==NULL)
            return NULL;
        if(pNode->right){
            return leftmostnode(pNode->right);
        }
        TreeLinkNode* p=pNode->next;
        while(p&&!isleftnode(pNode,p)){
            pNode=p;
            p=pNode->next;
        }
        return p;
    }
};
